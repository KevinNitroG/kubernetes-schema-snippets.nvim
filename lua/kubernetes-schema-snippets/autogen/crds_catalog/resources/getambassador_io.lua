local ls = require("luasnip")
local t = ls.text_node
local i = ls.insert_node

return function()
  return {
    t("authservice_v1"),
    t("authservice_v2"),
    t("authservice_v3alpha1"),
    t("consulresolver_v1"),
    t("consulresolver_v2"),
    t("consulresolver_v3alpha1"),
    t("devportal_v1"),
    t("devportal_v2"),
    t("devportal_v3alpha1"),
    t("filter_v1beta2"),
    t("filter_v2"),
    t("filter_v3alpha1"),
    t("filterpolicy_v1beta2"),
    t("filterpolicy_v2"),
    t("filterpolicy_v3alpha1"),
    t("host_v2"),
    t("host_v3alpha1"),
    t("kubernetesendpointresolver_v1"),
    t("kubernetesendpointresolver_v2"),
    t("kubernetesendpointresolver_v3alpha1"),
    t("kubernetesserviceresolver_v1"),
    t("kubernetesserviceresolver_v2"),
    t("kubernetesserviceresolver_v3alpha1"),
    t("listener_v3alpha1"),
    t("logservice_v1"),
    t("logservice_v2"),
    t("logservice_v3alpha1"),
    t("mapping_v1"),
    t("mapping_v2"),
    t("mapping_v3alpha1"),
    t("module_v1"),
    t("module_v2"),
    t("module_v3alpha1"),
    t("ratelimit_v1beta1"),
    t("ratelimit_v1beta2"),
    t("ratelimit_v2"),
    t("ratelimit_v3alpha1"),
    t("ratelimitservice_v1"),
    t("ratelimitservice_v2"),
    t("ratelimitservice_v3alpha1"),
    t("tcpmapping_v1"),
    t("tcpmapping_v2"),
    t("tcpmapping_v3alpha1"),
    t("tlscontext_v1"),
    t("tlscontext_v2"),
    t("tlscontext_v3alpha1"),
    t("tracingservice_v1"),
    t("tracingservice_v2"),
    t("tracingservice_v3alpha1"),
    i(nil, "resource"),
  }
end
